"use strict";

/**
 * Module dependencies.
 */
var mongoose = require('mongoose'),
		i18n = require("i18next"),
		config = require('../../config/config'),
		Schema = mongoose.Schema,
		timestamps = require('mongoose-timestamp');

var SeqModel = mongoose.model('Sequence');
var EntityModel = mongoose.model('entity');

var Dict = require('../controllers/dict');

var round = function (value, decimals) {
	return Number(Math.round(value + 'e' + (decimals)) + 'e-' + (decimals));
};

var setPrice = function (value) {
	return round(value, 2);
};

/**
 * Article Schema
 */
var orderSupplierSchema = new Schema({
	ref: {type: String, unique: true},
	Status: {type: String, default: 'NEW'},
	title: {//For internal use only
		ref: String,
		autoGenerated: {type: Boolean, default: false}, //For automatic process generated bills
	},
	supplier: {
		id: {type: Schema.Types.ObjectId, ref: 'Societe'},
		name: String,
		isNameModified: {type: Boolean}
	},
	contact: {id: {type: Schema.Types.ObjectId, ref: 'Contact'}, name: String},
	ref_supplier: {type: String},
	datec: {type: Date},
	notes: [{
			author: {
				id: {type: String, ref: 'User'},
				name: String
			},
			datec: Date,
			note: String
		}],
	total_ht: {type: Number, default: 0, set: setPrice},
	total_tva: [
		{
			tva_tx: Number,
			total: {type: Number, default: 0}
		}
	],
	total_ttc: {type: Number, default: 0},
	shipping: {type: Number, default: 0},
	author: {id: String, name: String},
	entity: {type: String},
	lines: [{
			qty: Number,
			tva_tx: Number,
			pu_ht: Number,
			description: String,
			product_type: String,
			product: {
				id: {type: Schema.Types.ObjectId, ref: "Product"},
				name: {type: String},
				label: String,
				template: {type: String, default: "/partials/lines/classic.html"},
				family: String
			},
			total_tva: Number,
			total_ttc: Number,
			total_ht: {type: Number, set: setPrice},
			discount: {type: Number, default: 0},
			optional: {}
		}],
	history: [{date: Date, author: {id: String, name: String}, Status: Schema.Types.Mixed}],
	optional: {}
}, {
	toObject: {virtuals: true},
	toJSON: {virtuals: true}
});

orderSupplierSchema.plugin(timestamps);

/**
 * Pre-save hook
 */
orderSupplierSchema.pre('save', function (next) {

	this.total_ht = 0;
	this.total_tva = [];
	this.total_ttc = 0;

	for (var i = 0; i < this.lines.length; i++) {
		//console.log(object.lines[i].total_ht);
		this.total_ht += this.lines[i].total_ht;
		//this.total_ttc += this.lines[i].total_ttc;

		//Add VAT
		var found = false;
		for (var j = 0; j < this.total_tva.length; j++)
			if (this.total_tva[j].tva_tx === this.lines[i].tva_tx) {
				this.total_tva[j].total += this.lines[i].total_tva;
				found = true;
				break;
			}

		if (!found) {
			this.total_tva.push({
				tva_tx: this.lines[i].tva_tx,
				total: this.lines[i].total_tva
			});
		}
	}

	this.total_ht = Math.round(this.total_ht * 100) / 100;
	//this.total_tva = Math.round(this.total_tva * 100) / 100;
	this.total_ttc = this.total_ht;

	for (var j = 0; j < this.total_tva.length; j++) {
		this.total_tva[j].total = Math.round(this.total_tva[j].total * 100) / 100;
		this.total_ttc += this.total_tva[j].total;
	}

	var self = this;
	if (this.isNew) {
		EntityModel.findOne({_id: self.entity}, "cptRef", function (err, entity) {
			if (err)
				console.log(err);

			if (entity && entity.cptRef) {
				SeqModel.inc("CF" + entity.cptRef, self.datec, function (seq) {
					//console.log(seq);
					self.ref = "CF" + entity.cptRef + seq;
					next();
				});
			} else {
				SeqModel.inc("CF", self.datec, function (seq) {
					//console.log(seq);
					self.ref = "CF" + seq;
					next();
				});
			}
		});
	} else
		next();
});

var statusList = {};
Dict.dict({dictName: "fk_order_status_supplier", object: true}, function (err, docs) {
	statusList = docs;
});

orderSupplierSchema.virtual('status')
		.get(function () {
			var res_status = {};

			var status = this.Status;

			//console.log("status :" + status);

			if (status && statusList.values[status].label) {
				//console.log(this);
				res_status.id = status;
				//res_status.name = i18n.t("orders:" + statusList.values[status].label);
				res_status.name = statusList.values[status].label;
				res_status.css = statusList.values[status].cssClass;
			} else { // By default
				res_status.id = status;
				res_status.name = status;
				res_status.css = "";
			}
			return res_status;

		});

mongoose.model('orderSupplier', orderSupplierSchema, 'OrderSupplier');
