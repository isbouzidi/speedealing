"use strict";

/**
 * Module dependencies.
 */
var mongoose = require('mongoose'),
		i18n = require("i18next"),
		config = require('../../config/config'),
		Schema = mongoose.Schema,
		timestamps = require('mongoose-timestamp');

var SeqModel = mongoose.model('Sequence');
var EntityModel = mongoose.model('entity');

var Dict = require('../controllers/dict');

var round = function (value, decimals) {
	return Number(Math.round(value + 'e' + (decimals)) + 'e-' + (decimals));
};

var setPrice = function (value) {
	return round(value, 2);
};

/**
 * Article Schema
 */
var deliverySchema = new Schema({
	ref: {type: String, unique: true},
	type: {type: String, default: 'DELIVERY_STANDARD'},
	title: {//For internal use only
		ref: String,
		autoGenerated: {type: Boolean, default: false}, //For automatic process generated deliveries
	},
	Status: {type: String, default: 'DRAFT'},
	cond_reglement_code: {type: String, default: '30D'},
	mode_reglement_code: {type: String, default: 'CHQ'},
	client: {
		id: {type: Schema.Types.ObjectId, ref: 'Societe'},
		name: String,
		isNameModified: {type: Boolean},
		cptBilling: {id: {type: Schema.Types.ObjectId}, name: String},
	},
	contact: {id: {type: Schema.Types.ObjectId, ref: 'Contact'}, name: String},
	ref_client: {type: String},
	price_level: {type: String, default: "BASE", uppercase: true, trim: true},
	address: String,
	zip: String,
	town: String,
	country_id: {type: String, default: 'FR'},
	state_id: Number,
	phone: String,
	email: String,
	datec: {type: Date, default: Date.now}, // date de creation
	datedl: {type: Date, default: Date.now}, // date d'expedition
	notes: [{
			author: {
				id: {type: String, ref: 'User'},
				name: String
			},
			datec: Date,
			note: String
		}],
	total_ht: {type: Number, default: 0, set: setPrice},
	total_tva: [
		{
			tva_tx: Number,
			total: {type: Number, default: 0}
		}
	],
	total_ttc: {type: Number, default: 0},
	shipping: {
		total_ht: {type: Number, default: 0, set: setPrice},
		tva_tx: {type: Number, default: 20},
		total_tva: {type: Number, default: 0}
	},
	author: {id: String, name: String},
	commercial_id: {id: {type: String}, name: String},
	entity: {type: String},
	modelpdf: String,
	order: {type: Schema.Types.ObjectId, ref: 'commande'},
	//orders: [{type: Schema.Types.ObjectId, ref: 'commande'}], // A supprimer plus tard
	//groups: [Schema.Types.Mixed],
	lines: [{
			group: {type: String, default: "1. DEFAULT"},
			title: String,
			description: {type: String, default: ""},
			product_type: String,
			product: {
				id: {type: Schema.Types.ObjectId, ref: "Product"},
				name: {type: String},
				label: String,
				unit: String,
			},
			qty: Number,
			pu_ht: Number,
			tva_tx: Number,
			total_tva: Number,
			total_ht: {type: Number, set: setPrice},
			discount: {type: Number, default: 0},
			no_package: Number, // Colis Number TODO a supprimer
			qty_order: Number
		}],
	history: [{date: Date, author: {id: String, name: String}, Status: Schema.Types.Mixed}],
	latex: {
		title: String,
		createdAt: {type: Date},
		data: Buffer,
	},
	feeDelivering: {type: Boolean, default: true} // Frais de facturation
}, {
	toObject: {virtuals: true},
	toJSON: {virtuals: true}
});

deliverySchema.plugin(timestamps);

/**
 * Pre-save hook
 */
deliverySchema.pre('save', function (next) {

	this.total_ht = 0;
	this.total_tva = [];
	this.total_ttc = 0;

	var i, j, found;

	for (i = 0; i < this.lines.length; i++) {
		//console.log(object.lines[i].total_ht);
		this.total_ht += this.lines[i].total_ht;
		//this.total_ttc += this.lines[i].total_ttc;

		//Add VAT
		found = false;
		for (j = 0; j < this.total_tva.length; j++)
			if (this.total_tva[j].tva_tx === this.lines[i].tva_tx) {
				this.total_tva[j].total += this.lines[i].total_tva;
				found = true;
				break;
			}

		if (!found) {
			this.total_tva.push({
				tva_tx: this.lines[i].tva_tx,
				total: this.lines[i].total_tva
			});
		}
	}

	// shipping cost
	if (this.shipping.total_ht) {
		this.total_ht += this.shipping.total_ht;

		this.shipping.total_tva = this.shipping.total_ht * this.shipping.tva_tx / 100;

		//Add VAT
		found = false;
		for (j = 0; j < this.total_tva.length; j++)
			if (this.total_tva[j].tva_tx === this.shipping.tva_tx) {
				this.total_tva[j].total += this.shipping.total_tva;
				found = true;
				break;
			}

		if (!found) {
			this.total_tva.push({
				tva_tx: this.shipping.tva_tx,
				total: this.shipping.total_tva
			});
		}
	}

	this.total_ht = round(this.total_ht, 2);
	//this.total_tva = Math.round(this.total_tva * 100) / 100;
	this.total_ttc = this.total_ht;

	for (j = 0; j < this.total_tva.length; j++) {
		this.total_tva[j].total = round(this.total_tva[j].total, 2);
		this.total_ttc += this.total_tva[j].total;
	}

	var self = this;
	if (this.isNew) {
		SeqModel.inc("BL", function (seq) {
			//console.log(seq);
			self.ref = "BL" + seq;
			next();
		});
	} else {
		if (this.Status !== "DRAFT" && this.total_ht !== 0 && this.ref.substr(0, 4) === "BL") {
			EntityModel.findOne({_id: self.entity}, "cptRef", function (err, entity) {
				if (err)
					console.log(err);

				if (entity && entity.cptRef) {
					SeqModel.inc("BL" + entity.cptRef, self.datec, function (seq) {
						//console.log(seq);
						self.ref = "BL" + entity.cptRef + seq;
						next();
					});
				} else {
					SeqModel.inc("BL", self.datec, function (seq) {
						//console.log(seq);
						self.ref = "BL" + seq;
						next();
					});
				}
			});
		} else {
			if (this.total_ht === 0)
				this.Status = "DRAFT";
			next();
		}
	}
//    EntityModel.findOne({_id: self.entity}, "cptRef", function(err, entity) {
//        if (err)
//            console.log(err);
//
//        if (entity && entity.cptRef) {
//            SeqModel.inc("BL" + entity.cptRef, self.datec, function(seq) {
//                //console.log(seq);
//                self.ref = "BL" + entity.cptRef + seq;
//                next();
//            });
//        } else {
//            SeqModel.inc("BL", self.datec, function(seq) {
//                //console.log(seq);
//                self.ref = "BL" + seq;
//                next();
//            });
//        }
//    });

});

/**
 * Methods
 */
deliverySchema.methods = {
	/**
	 * inc - increment delivery Number
	 *
	 * @param {function} callback
	 * @api public
	 */
	setNumber: function () {
		var self = this;
		if (this.ref.substr(0, 4) === "PROV")
			SeqModel.inc("FA", function (seq) {
				//console.log(seq);
				self.ref = "FA" + seq;
			});
	}
};

var statusList = {};
Dict.dict({dictName: 'fk_delivery_status', object: true}, function (err, doc) {
	if (err) {
		console.log(err);
		return;
	}
	statusList = doc;
});

deliverySchema.virtual('status')
		.get(function () {
			var res_status = {};

			var status = this.Status;

			if (status && statusList.values[status].label) {
				//console.log(this);
				res_status.id = status;
				res_status.name = i18n.t("deliveries:" + statusList.values[status].label);
				//res_status.name = statusList.values[status].label;
				res_status.css = statusList.values[status].cssClass;
			} else { // By default
				res_status.id = status;
				res_status.name = status;
				res_status.css = "";
			}
			return res_status;

		});

mongoose.model('delivery', deliverySchema, 'Delivery');
